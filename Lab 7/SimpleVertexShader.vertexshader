#version 330 core

layout(location = 0) in vec3 position;  // Vertex position
layout(location = 1) in vec3 normal;    // Vertex normal

uniform mat4 transform;     // Transformation matrix
uniform vec3 lightPos;      // Light position
uniform vec3 lightColor;    // Light color
uniform vec3 viewPos;       // View (camera) position

out vec3 fragColor;         // Interpolated color for fragment shader

void main()
{
    // Transform the vertex position
    gl_Position = transform * vec4(position, 1.0);

    // Ambient lighting
    float ka = 0.1; // Ambient strength
    vec3 ambient = ka * lightColor;

    // Diffuse lighting
    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(lightPos - position);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;

    // Specular lighting
    float ks = 0.1; // Specular strength
    vec3 viewDir = normalize(viewPos - position);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16);
    vec3 specular = ks * spec * lightColor;

    // Combine results
    fragColor = (ambient + diffuse + specular) * vec3(0.5,0.5,0.5);
}